Carbon OpenGL´´´ Contact nameGeoff Stahl´´´ Phone408-974-4030´´´ AppleLinkgstahl@apple.com´´´ Division/Department56/7003´´´ SupervisorJohn Stauffer´´´ Supervisor Phone408-974-1055´´´ Supervisor AppleLinkstauffer@apple.com´´´ Package nameCarbon OpenGL´´´ Version1.2´´´ contentsCarbon OpenGL.pbprojEnglish.lprojglCheck.cglCheck.hmain.cRead metrackball.ctrackball.h´´´ New/Add/ReplaceReplace´´´ Package DescriptionA clear and complete Carbon OpenGL sample to use as an application startingpoint.  Includes full Carbon Event code, Display Manager integration, a virtual trackball and complete OpenGL capability detection code.Version 1.2- glCheck and drawInfo code updated for Panther- fixed minor bug in variable declarationVersion 1.1- Adds automatic support for 6 Degree Of Freeedom (6DOF) devices, automatically searching for and configuring them at application start using the HID utilities.  Look to HIDSupport.c an .h for further details- Adds support for different surfaces as an example of using display list to draw static data- Adds setting of the Dock icon on minimize (thanks to Dan Herman)- bug fix and clean upThis sample demonstrates three basic elements.- First and foremost, it is a reasonably complete correctly formed Carbon Event based application which can be used as a starting point for Carbon based OpenGL application.  Time was taken to ensure the display related events were handled correctly and that developers could use the structure presented here in their applications.  This includes correctly handling display configuration changes, which all applications should strive to do.  The structure is window based thus each window maintains it's own state, camera, rotations, etc.  Lastly, the camera design is a reasonable starting point for developers who want to work with camera based projections.- Second, the application includes a well structured virtual track ball, including handling of pan, dolly and zoom.  This code is presented in the track ball.c file and is applicable to Carbon or Cocoa applications, though Cocoa applications my want to use the Objective-C version contained in the Teapot sample (on which this code was based).  This sample shows a full Carbon Event interface to this track ball code using primary, secondary and tertiary mouse buttons for rotation, pan and dolly respectively.  The scroll wheel is designated as a zoom control.- Lastly, this sample contains stand alone code for retrieving OpenGL capabilities and associating these with graphics device.  Capabilities collected include; device identification from OpenGL, CoreGraphics and Carbon, device geometry and refresh rates, VRAM and texture RAM, texture units and texture limits, OpenGL version, and OpenGL functionality.  The OpenGL functionality collected is set up to correct coalesce extension and version information into one capability flag allowing developers to quickly determine if a renderer has a specific capability, whether it is exposed via OpenGL extensions or in the core functionality.  Furthermore this functional information represents the full set of functionality for OpenGL on Mac OS X at the time of the sample posting. Developers are free to add additional checks or remove unneeded ones to fit their intended OpenGL usage.A few usage notes are in order.  The CheckOpenGLCaps (...) is set up like many CG routines allowing the developer to call it once to check the number of capabilities to be returned, then allocate just the required storage required prior to retrieving the actual capability information.  Since Mac OS X can dynamically refigure it's displays, OpenGL capability information should be update whenever the display configuration is changed.  This is easily accomplished with a Display Manager callback as is illustrated in the sample application.  Lastly, the sample application does not actually use the capabilities retrieved as it has extremely simple OpenGL content for illustration purposes.Comments and bugs are welcome at: <http://developer.apple.com/bugreporter>Requirements: ProjectBuilder, Mac OS X 10.1 or later.Keywords: OpenGL, Carbon Event, Display Manager, trackball, virtual trackball, Carbon, capabilities´´´ DistributionUnrestricted´´´ Runtime EnvironmentCarbon